/*	сохраняем данный файл в кодировке UTF-8		*/

	author: Golinskiy Konstantin	e-mail: golinskiy.konstantin@gmail.com

// AD9833 - это программируемый генератор сигналов с низким энергопотреблением. 
// Позволяет генерировать сигналы с частотой до 12.5МГц синусоидальной, треугольной и прямоугольной формы.


// Цифровое программирование частоты и фазы.
// Потребляемая мощность 12.65 мВт при напряжении 3 В.
// Диапазон выходных частот от 0 МГц до 12.5 МГц.
// Разрешение 28 бит (0.1 Гц при частоте опорного сигнала 25 МГц).
// Синусоидальные, треугольные и прямоугольные выходные колебания.
// Напряжение питания от 2.3 В до 5.5 В.
// Трехпроводной интерфейс SPI.
// Расширенный температурный диапазон: от –40°C до +105°C.
// Опция пониженного энергопотребления

// VCC – плюс питания для цифровых и аналоговых цепей генератора.
// DGND – цифровая земля.
// SDATA – вход данных интерфейса SPI. Передача осуществляется 16-битными словами.
// SCLK – вход тактового сигнала SPI. Используется второй режим работы: (CPOL = 1, CPHA = 0).
// FSYNC – выбор микросхемы. Перед началом передачи данных должен быть установлен в 0, по завершении в 1.
// AGND – аналоговая земля.
// OUT – выход генератора.


	#include "AD9833.h"
			
			// Настройки SPI ставим режим только передача мастер, скорость около 10Мб/с, CPOL = HIGH  CPHA = 1Edge. 
			
			//-------------------------------------------------------------------
			В файле AD9833.h указываем нужные настройки
			
			// указываем номер SPI
			#define AD9833_SPI_PORT 							hspi1

			// указываем порт и пин ножки CS
			#define AD9833_FSYNC_GPIO_Port 				GPIOA
			#define AD9833_FSYNC_Pin 							GPIO_PIN_6

			// указываем частоту в герцах кварца на модуле ( по умолчанию 25000000 Гц )
			#define FMCLK	 												25000000	
			//-------------------------------------------------------------------

	.........
	.........

main()=============================================================================================================================

	.........
	.........
	.........

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// запускаем генератор с прямоугольным сигналом на частоте 100 Гц без здвига фазы
AD9833_Init( wave_square, 100.0f, 0.0f);
HAL_Delay ( 5000 );

// меняем форму сигнала на прямоугольный но с делением частоты установленной на 2 ( 50 Гц )
AD9833_SetWaveform( wave_square_div2 );
HAL_Delay ( 5000 );

// запускаем генератор с прямоугольным сигналом на частоте 100 Гц без здвига фазы
AD9833_Init( wave_square, 100.0f, 0.0f);
HAL_Delay ( 5000 );

// меняем частоту на 1 КГц ( 0.1Гц - 25МГц )
AD9833_SetFrequency( 1000.0f );
HAL_Delay ( 5000 );

// отключаем сигнал на выходе ( но настройки остаются в модуле )
AD9833_OutputEnable(0);
HAL_Delay ( 4000 );
// включаем генератор ( с настройками которые храняться в модуле )
AD9833_OutputEnable(1);
HAL_Delay ( 4000 );

// меняем форму сигнала на синус
AD9833_SetWaveform( wave_sine );
HAL_Delay ( 5000 );

// отключаем сигнал на выходе
AD9833_OutputEnable(0);
// меняем форму сигнала на треугольный
AD9833_SetWaveform( wave_triangle );
// включаем генератор ( с новыми настройками )
AD9833_OutputEnable(1);
HAL_Delay ( 5000 );

// сдвигаем фазу на 180 градусов ( от 0 - 360 )
AD9833_SetPhase( 180.0f );
HAL_Delay ( 5000 );

// уводим модуль в спящий режим
AD9833_SleepMode( FULL_POWERDOWN );
HAL_Delay ( 5000 );

// выводим модуль из спящего режима
AD9833_SleepMode( NO_POWERDOWN );
HAL_Delay ( 5000 );

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

while(1)===========================================================================================================================

	.........
	.........
	.........
	.........

=== end while(1) ==================================================================================================================
=== end main() ====================================================================================================================
